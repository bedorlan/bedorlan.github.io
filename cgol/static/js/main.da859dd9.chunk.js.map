{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","Game","useState","Grid","grid","setGrid","loaded","setLoaded","fps","setFps","setFramesCount","lexiconFilter","setLexiconFilter","lexicon","setLexicon","currentPattern","setCurrentPattern","fullCanvasRef","useRef","lastMousePosition","setlLastMousePosition","useEffect","Promise","all","fetch","then","res","json","lex","filter","l","length","forEach","desc","replace","trim","setInterval","g","tick","c","style","display","onMouseMove","e","x","nativeEvent","pageX","y","pageY","drawPreview","onKeyUp","key","newPattern","rotate90","onMouseUp","current","getContext","clearRect","window","innerWidth","innerHeight","ref","width","height","position","pointerEvents","flexDirection","href","alignItems","margin","placeholder","value","onChange","target","overflow","name","toLowerCase","includes","map","type","cursor","textAlign","title","onMouseDown","fromLexicon","GridViewer","cellSize","newGrid","copyFrom","context","fillStyle","drawGridOnCanvas","props","refCanvas","fillRect","canvas","Math","floor","stopPropagation","offsetX","offsetY","cells","this","Uint8Array","fill","i","j","pos","get","copy","slice","a0","getSafe","a1","a2","a3","a4","a5","a6","a7","a8","neighbors","sign","set","color","hashSize","di","dj","offset","other","player","rle","split","header","body","headerMatch","match","Number","result","strBody","join","matchAll","section","tag","count","state","gridText","charAt","colors","cell","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da859dd9.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react'\n\nexport default function App() {\n  return <Game />\n}\n\nconst hashSize = 5\nlet hash5: Uint32Array | null = null\n\ninterface ILexicon {\n  name: string\n  desc: string\n  grid: string[]\n}\n\nfunction Game() {\n  const cellSize = 3\n  const [grid, setGrid] = useState(() => new Grid(300, 200))\n  const [loaded, setLoaded] = useState<boolean>(false)\n  const [fps, setFps] = useState(0)\n  const [, setFramesCount] = useState(0)\n  const [lexiconFilter, setLexiconFilter] = useState('')\n  const [lexicon, setLexicon] = useState<Array<ILexicon>>([])\n  const [currentPattern, setCurrentPattern] = useState<Grid | null>(null)\n  const fullCanvasRef = useRef<HTMLCanvasElement>(null)\n  const [lastMousePosition, setlLastMousePosition] = useState<{ x: number; y: number } | null>(null)\n\n  useEffect(() => {\n    Promise.all([\n      // fetch('hash5.buff')\n      //   .then(res => res.arrayBuffer())\n      //   .then(buff => (hash5 = new Uint32Array(buff))),\n\n      fetch('lexicon.json')\n        .then(res => res.json())\n        .then((lex: ILexicon[]) => {\n          lex = lex.filter(l => l.grid.length)\n          lex.forEach(l => (l.desc = l.desc.replace(/\\s{2,}/g, ' ').trim()))\n          setLexicon(lex)\n        }),\n    ]).then(() => setLoaded(true))\n  }, [])\n\n  useEffect(() => {\n    if (!loaded) return\n    setInterval(() => {\n      setGrid(g => g.tick())\n      setFramesCount(c => c + 1)\n    }, 1000 / 16)\n  }, [loaded])\n\n  useEffect(() => {\n    setInterval(() => {\n      setFramesCount(c => {\n        setFps(c)\n        return 0\n      })\n    }, 1000)\n  }, [])\n\n  return (\n    <div\n      style={{ display: 'flex' }}\n      onMouseMove={e => {\n        setlLastMousePosition({ x: e.nativeEvent.pageX, y: e.nativeEvent.pageY })\n        if (!currentPattern) return\n        drawPreview(e.nativeEvent.pageX, e.nativeEvent.pageY)\n      }}\n      onKeyUp={e => {\n        if (e.key !== ' ') return\n        setCurrentPattern(currentPattern => {\n          if (!currentPattern) return currentPattern\n          const newPattern = currentPattern.rotate90()\n          if (lastMousePosition) drawPreview(lastMousePosition.x, lastMousePosition.y)\n          return newPattern\n        })\n      }}\n      onMouseUp={e => {\n        fullCanvasRef.current!.getContext('2d')!.clearRect(0, 0, window.innerWidth, window.innerHeight)\n        setCurrentPattern(null)\n      }}\n    >\n      <canvas\n        ref={fullCanvasRef}\n        width={window.innerWidth}\n        height={window.innerHeight}\n        style={{ position: 'fixed', pointerEvents: 'none' }}\n      />\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <div>\n          Drag & drop into the blue canvas to view pattern. Press spacebar while dragging to rotate. <br />\n          <a href=\"https://github.com/bedorlan/cgol\">Source code</a> <br />\n          FPS={fps}\n        </div>\n        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'flex-start', height: '600px' }}>\n          <div style={{ display: 'flex', flexDirection: 'column', width: '25em' }}>\n            <input\n              style={{ margin: '5px', width: '24em' }}\n              placeholder=\"Filter here\"\n              value={lexiconFilter}\n              onChange={e => setLexiconFilter(e.target.value)}\n            />\n            <div style={{ display: 'flex', flexDirection: 'column', height: '35em', overflow: 'scroll' }}>\n              {lexicon\n                .filter(lex => lex.name.toLowerCase().includes(lexiconFilter.toLowerCase()))\n                .map(lex => (\n                  <button\n                    type=\"button\"\n                    style={{ cursor: 'move', textAlign: 'left' }}\n                    key={lex.name}\n                    title={lex.desc}\n                    onMouseDown={e => {\n                      setCurrentPattern(Grid.fromLexicon(lex.grid, 1))\n                      drawPreview(e.nativeEvent.pageX, e.nativeEvent.pageY)\n                    }}\n                  >\n                    {lex.name}\n                  </button>\n                ))}\n            </div>\n          </div>\n          <GridViewer\n            cellSize={cellSize}\n            grid={grid}\n            onMouseUp={c => {\n              if (!currentPattern) return\n              const newGrid = currentPattern\n              setGrid(g => {\n                return g.copyFrom(newGrid, c.x, c.y)\n                // .copyFrom(\n                //   newGrid.rotate90().rotate90().changePlayer(2),\n                //   grid.width - c.x - newGrid.width,\n                //   grid.length - c.y - newGrid.length,\n                // )\n              })\n              fullCanvasRef.current!.getContext('2d')!.clearRect(0, 0, window.innerWidth, window.innerHeight)\n              setCurrentPattern(null)\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  )\n\n  function drawPreview(x: number, y: number) {\n    setCurrentPattern(currentPattern => {\n      if (!currentPattern) return currentPattern\n      const context = fullCanvasRef.current!.getContext('2d')!\n      context.clearRect(0, 0, window.innerWidth, window.innerHeight)\n      context.fillStyle = '#00ff00'\n      drawGridOnCanvas(context, x, y, currentPattern, cellSize)\n      return currentPattern\n    })\n  }\n}\n\ninterface IGridViewerProps {\n  grid: Grid\n  cellSize: number\n  onMouseUp?: (coor: { x: number; y: number }) => void\n}\nfunction GridViewer(props: IGridViewerProps) {\n  const cellSize = props.cellSize\n  const grid = props.grid\n  const refCanvas = useRef<HTMLCanvasElement>(null)\n\n  useEffect(\n    function draw() {\n      const context = refCanvas.current!.getContext('2d')!\n      context.fillStyle = '#0a1243'\n      context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n      context.fillStyle = '#101d70'\n      context.fillRect(Math.floor(context.canvas.width * (1 / 3)), 0, 1, context.canvas.height)\n      context.fillRect(Math.floor(context.canvas.width * (2 / 3)), 0, 1, context.canvas.height)\n      drawGridOnCanvas(context, 0, 0, grid, cellSize)\n    },\n    [grid],\n  )\n\n  return (\n    <canvas\n      width={`${grid.width * cellSize}px`}\n      height={`${grid.length * cellSize}px`}\n      onMouseUp={e => {\n        e.stopPropagation()\n        props.onMouseUp?.({\n          x: Math.floor(e.nativeEvent.offsetX / cellSize),\n          y: Math.floor(e.nativeEvent.offsetY / cellSize),\n        })\n      }}\n      ref={refCanvas}\n    ></canvas>\n  )\n}\n\nclass Grid {\n  width: number\n  length: number\n  cells: Uint8Array\n\n  constructor(x: number, y: number) {\n    this.width = x\n    this.length = y\n    this.cells = new Uint8Array(x * y).fill(0)\n  }\n\n  get(i: number, j: number) {\n    return this.cells[pos(this.width, i, j)]\n  }\n\n  getSafe(i: number, j: number) {\n    if (i < 0 || i >= this.width || j < 0 || j >= this.length) return 0\n    return this.get(i, j) || 0\n  }\n\n  set(i: number, j: number, value: number) {\n    this.cells[pos(this.width, i, j)] = value\n  }\n\n  tick() {\n    const copy = new Grid(this.width, this.length)\n    copy.cells = this.cells.slice()\n    for (let j = 0; j < this.length; ++j) {\n      for (let i = 0; i < this.width; ++i) {\n        const a0 = this.getSafe(i - 1, j - 1)\n        const a1 = this.getSafe(i + 0, j - 1)\n        const a2 = this.getSafe(i + 1, j - 1)\n        const a3 = this.getSafe(i - 1, j + 0)\n        const a4 = this.getSafe(i + 0, j + 0)\n        const a5 = this.getSafe(i + 1, j + 0)\n        const a6 = this.getSafe(i - 1, j + 1)\n        const a7 = this.getSafe(i + 0, j + 1)\n        const a8 = this.getSafe(i + 1, j + 1)\n        const neighbors =\n          Math.sign(a0) +\n          Math.sign(a1) +\n          Math.sign(a2) +\n          Math.sign(a3) +\n          Math.sign(a5) +\n          Math.sign(a6) +\n          Math.sign(a7) +\n          Math.sign(a8)\n        if (a4 > 0 && (neighbors < 2 || neighbors > 3)) copy.set(i, j, 0)\n        else if (a4 === 0 && neighbors === 3) {\n          const color = a0 + a1 + a2 + a3 + a5 + a6 + a7 + a8 <= 4 ? 1 : 2\n          copy.set(i, j, color)\n        }\n      }\n    }\n    return copy\n  }\n\n  tick2() {\n    const copy = new Grid(this.width, this.length)\n    copy.cells = this.cells.slice()\n    for (let j = -1; j < this.length; j += hashSize - 2) {\n      for (let i = -1; i < this.width; i += hashSize - 2) {\n        let x = 0\n        for (let di = 0; di < hashSize; ++di) {\n          for (let dj = 0; dj < hashSize; ++dj) {\n            x |= this.getSafe(i + di, j + dj) << (dj * hashSize + di)\n          }\n        }\n        const y = hash5![x]\n        for (let di = 1; di < hashSize - 1; ++di) {\n          for (let dj = 1; dj < hashSize - 1; ++dj) {\n            const offset = dj * hashSize + di\n            const value = (y & (1 << offset)) >>> offset\n            copy.set(i + di, j + dj, value)\n          }\n        }\n      }\n    }\n    return copy\n  }\n\n  copyFrom(other: Grid, x: number, y: number) {\n    const copy = new Grid(this.width, this.length)\n    copy.cells = this.cells.slice()\n    for (let j = 0; j < other.length; ++j) {\n      if (j + y >= this.length) break\n      for (let i = 0; i < other.width; ++i) {\n        if (i + x >= this.width) break\n        copy.set(i + x, j + y, other.get(i, j))\n      }\n    }\n    return copy\n  }\n\n  rotate90() {\n    const copy = new Grid(this.length, this.width)\n    for (let j = 0; j < this.length; ++j) {\n      for (let i = 0; i < this.width; ++i) {\n        copy.set(this.length - 1 - j, i, this.get(i, j))\n      }\n    }\n    return copy\n  }\n\n  changePlayer(player: number) {\n    const copy = new Grid(this.width, this.length)\n    for (let j = 0; j < this.length; ++j) {\n      for (let i = 0; i < this.width; ++i) {\n        copy.set(i, j, this.get(i, j) > 0 ? player : 0)\n      }\n    }\n    return copy\n  }\n\n  static fromRle(rle: string): Grid | null {\n    const [header, ...body] = rle.replace(/#.*/g, '').trim().split('\\n')\n\n    const extractXY = /x\\s*=\\s*(\\d+)\\s*,\\s*y\\s*=\\s*(\\d+)/\n    const headerMatch = header.match(extractXY)\n    if (!headerMatch) return null\n    const [, x, y] = headerMatch.map(Number)\n\n    const result = new Uint8Array(x * y).fill(0)\n    let i = 0\n    let j = 0\n    const strBody = body.join('').replace('!', '')\n    const extractSection = /(\\d*)([bo$])/g\n    for (const section of strBody.matchAll(extractSection)) {\n      const tag = section[2]\n      let count = Number(section[1]) || 1\n      if (tag === '$') {\n        j += count\n        i = 0\n      } else {\n        const state = tag === 'o' ? 1 : 0\n        while (count-- > 0) result[pos(x, i++, j)] = state\n      }\n    }\n\n    const grid = new Grid(x, y)\n    grid.cells = result\n    return grid\n  }\n\n  static fromLexicon(gridText: ILexicon['grid'], player: number) {\n    const width = gridText[0].length\n    const length = gridText.length\n    const grid = new Grid(width, length)\n    for (let j = 0; j < length; ++j) {\n      for (let i = 0; i < width; ++i) {\n        grid.cells[pos(width, i, j)] = gridText[j].charAt(i) === '1' ? player : 0\n      }\n    }\n    return grid\n  }\n}\n\nfunction drawGridOnCanvas(context: CanvasRenderingContext2D, x: number, y: number, grid: Grid, cellSize: number) {\n  const colors = ['#000000', '#b3b3ff', '#ffb3b3', '#00ff00']\n  for (let j = 0; j < grid.length; ++j) {\n    for (let i = 0; i < grid.width; ++i) {\n      const cell = grid.get(i, j)\n      if (cell > 0) {\n        context.fillStyle = colors[cell]\n        context.fillRect(x + i * cellSize, y + j * cellSize, cellSize, cellSize)\n      }\n    }\n  }\n}\n\nfunction pos(width: number, i: number, j: number) {\n  return width * j + i\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}